package com.badlogic.androidgames; //depends on which package

import android.app.Activty;
import android.content.Context;
import android.graphics.Canvas;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.Window;
import android.view.WindowManager;

public class SurfaceViewTest extends Activity
{
  FastRenderView renderView;
  MovingObject moveRect;
  viewUtil viewUtil;
  
  public void onCreate( Bundle savedInstanceState )
  {
    super.onCreate( Bundle savedInstanceState )
    requestWindowFeature( Window.FEATURE_NO_TITLE );
    getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN );
    MovingObject moveRect = new Rect( (view.getWidth - 25), (view.getHieght -25), (renderView.getWidth + 25), (renderView.getHeight() + 25);
    renderView = new FastRenderView( this );
    setContentView( renderView );
  }
  
  protected void onResume()
  {
    super.onResume();
    renderView.resume();
  }
  
  protected void onPause()
  {
    super.onPause();
    renderView.pause();
  }  
  
  class FastRenderView extends SurfaceVIew implements Runnable 
  {
    Thread renderThread = null;
    SurfaceHolder holder;
    volatile boolean running = false;
    
    public FastRenderView( Context context )
    {
      super( context );
      holder = getHolder();
    }
    
    public void resume()
    {
      running = true;
      renderThread = new Thread( this );
      renderThread.start();
    }
    
    public void run()
    {
      while(running)
      {
        if(!holder.getSurface().isValid())
          continue;
        Canvas canvas = holder.lockCanvas();
        canvas.drawRGB( 255, 0, 0 );
        holder.unlockCanvasandPost( canvas ;)
        // rect.moveRectWithNoAccel( passedTime );
        // rect.moveRectWithAccel( passedTime );
      }
    }
    
    public void pause() 
    {
      running = false;
      while( true )
      {
        try {
          renderThread.join();
          return;
        } catch ( InterruptedException e ) {
          //retry
        }
      }
    }
  }
  
  public class MovingObjRect( movingRect, int moveRate, boolean moving, String direction ) 
  {
   public void MovingObjects()
    {
      this.moveRate = moveRate;
      this.movingRect = movingRect;
      this.moving = moving;
      this.direction = direction;
    }
    
    public void moveRectNoAccel( int passedSec )
    {
      // update the placement of rectangle when called depending on the passed time
      // also look for direction variables and state
    }
    
    public void moveRectWithAccel( int passedSec )
    {
      // update placement of rectangle when called depending on the passed time
      // also look for direction variables and state
      // also do the calulation on accel. 
    }
  }
}  
