package com.badlogic.androidgames; //depends on which package

import android.app.Activty;
import android.content.Context;
import android.graphics.Canvas;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.Window;
import android.view.WindowManager;

public class SurfaceViewTest extends Activity
{
  FastRenderView renderView;
  MovingObjRect mRectOne;
  Rect moveRect
  float deltaTime;
  String[] directionOpt = new Array[];
  
  public void onCreate( Bundle savedInstanceState )
  {
    super.onCreate( Bundle savedInstanceState )
    requestWindowFeature( Window.FEATURE_NO_TITLE );
    // movingRect = new Rect();
    // mRectOne = new MovingObjRect( 4, True, NONE );
    // directionOpt = [UPRIGHT, UPRIGHT, DOWNRIGHT, DOWNLEFT, DOWN. UP];
    getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN );
    MovingObject moveRect = new Rect( (view.getWidth - 25), (view.getHieght -25), (renderView.getWidth + 25), (renderView.getHeight() + 25);
    renderView = new FastRenderView( this );
    setContentView( renderView );
  }
  
  protected void onResume()
  {
    super.onResume();
    renderView.resume();
  }
  
  protected void onPause()
  {
    super.onPause();
    renderView.pause();
  }  
  
  class FastRenderView extends SurfaceVIew implements Runnable 
  {
    Thread renderThread = null;
    SurfaceHolder holder;
    volatile boolean running = false;
    
    public FastRenderView( Context context )
    {
      super( context );
      holder = getHolder();
    }
    
    public void resume()
    {
      running = true;
      renderThread = new Thread( this );
      renderThread.start();
    }
    
    public void run()
    {
      long startTime = System.nanoTime();
      while( running )
      {
        deltaTime = ( System.nanoTime() - strtTime ) / 1000000000.0f;
        startTime = System.nanoTime();
        if(!holder.getSurface().isValid())
          continue;
        Canvas canvas = holder.lockCanvas();
        canvas.drawRGB( 255, 0, 0 );
        holder.unlockCanvasandPost( canvas ;)
        // mRectOne.moveRectWithNoAccel( deltaTime );
        // mRectOne.moveRectWithAccel( deltaTime );
      }
    }
    
    public void pause() 
    {
      running = false;
      while( true )
      {
        try {
          renderThread.join();
          return;
        } catch ( InterruptedException e ) {
          //retry
        }
      }
    }
  }
  
  public class MovingObjRect 
  {
   public void MovingObjRect( int moveRate, boolean moving, String direction )
    {
      this.moveRate = moveRate;
      this.moving = moving;
      this.direction = direction;
      if ( direction == 'NONE' )
        direction == 
    }
    
    public void moveRectNoAccel( int passedTime )
    {
      // update the placement of rectangle when called depending on the deltaTime
      // also look for direction variables and state
      // xmove = moveRate * passedTime;
      // ymove = moveRate * passedTime;
      return // the update placement of x, y
    }
    
    public void moveRectWithAccel( int passedTime )
    {
      // update placement of rectangle when called depending on the deltaTime
      // also look for direction variables and state
      // do the added calculation on acceleration
      return //the updated placement of x, y
    }
  }
}  
